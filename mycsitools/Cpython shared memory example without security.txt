----python part---- 
  
from ctypes import * 
#windll.kernel32.SetLastError(-100) 
print windll.kernel32.GetLastError() 
getMessage=windll.kernel32.OpenFileMappingA 
getMessage.restype = c_int 
handle=getMessage(1,False,"Global\\MyFileMappingObject") 
if handle ==0: 
     print 'open file mapping handle is Null' 
      
else: 
     mapView=windll.kernel32.MapViewOfFile 
     mapView.restype = c_char_p 
     print mapView(handle,1,0,0,256) 
  
----c part---- 
#include <windows.h> 
#include <stdio.h> 
#include <conio.h> 
#include <tchar.h> 
  
#define BUF_SIZE 256 
TCHAR szName[] = TEXT("Global\\MyFileMappingObject"); 
TCHAR szMsg[] = TEXT("Message from first process."); 
  
int _tmain() 
{ 
     HANDLE hMapFile; 
     LPCTSTR pBuf; 
  
     hMapFile = CreateFileMapping( 
         INVALID_HANDLE_VALUE,    // use paging file 
         NULL,                    // default security 
         PAGE_READWRITE,          // read/write access 
         0,                       // maximum object size (high-order DWORD) 
         BUF_SIZE,                // maximum object size (low-order DWORD) 
         szName);                 // name of mapping object 
  
     if (hMapFile == NULL) 
     { 
         _tprintf(TEXT("Could not create file mapping object (%d).\n"), 
             GetLastError()); 
         return 1; 
     } 
     pBuf = (LPTSTR)MapViewOfFile(hMapFile,   // handle to map object 
         FILE_MAP_ALL_ACCESS, // read/write permission 
         0, 
         0, 
         BUF_SIZE); 
  
     if (pBuf == NULL) 
     { 
         _tprintf(TEXT("Could not map view of file (%d).\n"), 
             GetLastError()); 
  
         CloseHandle(hMapFile); 
  
         return 1; 
     } 
  
  
     CopyMemory((PVOID)pBuf, szMsg, (_tcslen(szMsg) * sizeof(TCHAR))); 
     _getch(); 
  
     UnmapViewOfFile(pBuf); 
  
     CloseHandle(hMapFile); 
  
     return 0; 
} 